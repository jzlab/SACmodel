
proc build(){
    for p=0,numSACs-1{
        SAC[p]=new star(Xorg.x[p],Yorg.x[p])

    }
}
proc setg(){
    if (bipG1==0||contrast==0||bipG2==0){
        bipG1=0
        bipG2=0
    }else{
        bipG1=bipG1*contrast    
        bipG2=bipG2*contrast
    }
    for i=0,numSACs-1{
        if(nodends==0){
            for ibipSyn=0, SAC[i].bipSynapses.count()-1{
                    SAC[i].bipSynapses.object(ibipSyn).g1max=bipG1
                    SAC[i].bipSynapses.object(ibipSyn).g2max=bipG2

            }
        }
    }
}

proc delay(){
    for i=0,numSACs-1{
        for ibipSyn=0, SAC[i].bipSynapses.count()-1{                                             //delay
            x=SAC[i].bipSynapses.object(ibipSyn).locx
            y=SAC[i].bipSynapses.object(ibipSyn).locy
            SAC[i].bipSynapses.object(ibipSyn).del= ((cos(thetas.x[i])*x+sin(thetas.x[i])*y))*bipspeed +1*(50+dendL)  //change left right

        }
    }
}
func PosToTime(){
    x=$1
    y=$2
    return (((cos(thetas.x[chosenSAC])*x+sin(thetas.x[chosenSAC])*y))*bipspeed +50+dendL)
}
func round(){
    if((abs($1)%1)<.5){
        return int($1)
    }else{
        if($1>0){
            addition=1
        }else{
            addition=-1
        }
        return int($1) +addition
    }
}
proc biptimes(){ //Is this useful?
    smalldel=tstop
    bigdel=-1
    for i=0,numSACs-1{
        for ibipSyn=0, SAC[i].bipSynapses.count()-1{                                             //delay
            if(SAC[i].bipSynapses.object(ibipSyn).del<smalldel){
                smalldel=SAC[i].bipSynapses.object(ibipSyn).del
            }
            if(SAC[i].bipSynapses.object(ibipSyn).del>bigdel){
                bigdel=SAC[i].bipSynapses.object(ibipSyn).del
            }
        }
    }
    print "begin ", smalldel, " end ", bigdel
}
proc gangdelay(){
    for ibipSyn=0, Gang.bipSynapses.count()-1{
        x=Gang.bipSynapses.object(ibipSyn).locx
        y=Gang.bipSynapses.object(ibipSyn).locy
        Gang.bipSynapses.object(ibipSyn).del= ((cos(thetas.x[0])*x+sin(thetas.x[0])*y))/bipspeed +50+dendL
        Gang.bipSynapses.object(ibipSyn).g1max=bipG1
        Gang.bipSynapses.object(ibipSyn).g2max=bipG2
    }
}


proc savetrueangle(){
    for i2=0, numSACs-1{
        for ivari=0, numOutside-1{
            x=SAC[i2].endXpos.get(ivari)
            y=SAC[i2].endYpos.get(ivari)
            x1=x-Xorg.get(i2)         
            y1=y-Yorg.get(i2)
            SAC[i2].trueAngle.append(atan2(y1,x1))
        }
    }
}

proc saveendangle(){
    for i2=0, numSACs-1{
        /*
            if(SAC[i2].endAngle.size()>0){
                SAC[i2].endAngle.remove(0,SAC[i2].endAngle.size()-1)
            }
        */
        for ivari=0, numOutside-1{

            x=SAC[i2].endXpos.get(ivari)
            y=SAC[i2].endYpos.get(ivari)
            x1=x-Xorg.get(i2)         
            y1=y-Yorg.get(i2)
            newy=(cos(thetas.x[i2])*y1-sin(thetas.x[i2])*x1)
            newx=(sin(thetas.x[i2])*y1+cos(thetas.x[i2])*x1)
            SAC[i2].endAngle.append(atan2(newy,newx)) 
        }
        holder=1      //-------pick example left right recordings
        iofchoice=-1
        for i=0, SAC[i2].endAngle.size()-1{
            if(abs(SAC[i2].endAngle.x[i])<holder){
                holder=abs(SAC[i2].endAngle.x[i])
                iofchoice=i
            }
        }
        SAC[i2].nullpref.x[0]=(iofchoice)//null
        holder=1      
        iofchoice=-1
        for i=0, SAC[i2].endAngle.size()-1{
            if(abs(abs(SAC[i2].endAngle.x[i])-PI)<holder){
                holder=abs(abs(SAC[i2].endAngle.x[i])-PI)
                iofchoice=i
            }
        }
        SAC[i2].nullpref.x[1]=iofchoice//preferred
        
    }
}
proc endangle(){
    for i2=0, numSACs-1{
        
        
        for ivari=0, numOutside-1{

            x=SAC[i2].endXpos.get(ivari)
            y=SAC[i2].endYpos.get(ivari)
            x1=x-Xorg.get(i2)         
            y1=y-Yorg.get(i2)
            newy=(cos(thetas.x[i2])*y1-sin(thetas.x[i2])*x1)
            newx=(sin(thetas.x[i2])*y1+cos(thetas.x[i2])*x1)
            SAC[i2].endAngle.append(atan2(newy,newx)) 
        }
    }
}

//--------------------------------conditionally connecting procedure
objectvar temp
proc connecting(){
    for i2=0, numSACs-1{     //switch back //numSACs-1
        for ivari=0, SAC[i2].variXpos.size()-1{ //presynaptic points of interest
            x=SAC[i2].variXpos.get(ivari) 
            y=SAC[i2].variYpos.get(ivari)  

            for iSAC=0, numSACs-1{
                if (iSAC==i2){ 
                }else{
                   
                    if(connectfar){     //near far condition
                        idend1=numInside
                        idend2=numDend-1
                        fielddist=500000
                    }else{
                        idend1=0
                        idend2=numFirst-1
                        fielddist=(dendL/4)^2
                    }
                    if(((Xorg.x[iSAC]-x)^2)+ ((Yorg.x[iSAC]-y)^2)<fielddist){      //we're close enough to the iSAC //only useful if we connect close
                        for idend=idend1, idend2{
                            access SAC[iSAC].dend[idend]
                            if(connectfar){
                                dendx=(x3d(0)+(x3d(1)-x3d(0))*(.5))
                                dendy=(y3d(0)+(y3d(1)-y3d(0))*(.5))
                            }else{
                                dendx= SAC[iSAC].InnerXpos.x[idend] 
                                dendy= SAC[iSAC].InnerYpos.x[idend]
                            }
                            if(((dendx-x)^2 + (dendy-y)^2)< SACmaxDist^2){           //we're close enough to the dend
                                temp=new ComplexCl2(.5) 
                                temp.scaling=clchannelscaling
                                temp.amp=clchannelamp
                                temp.thres=clchannelthres
                                temp.tau1=clchanneltau1
                                temp.tau2=clchanneltau2
                                temp.g=cachannelg
                                //-----------extension is wherever the capre came from 1, .5
                                whatdend=SAC[i2].variInfo.object(ivari).x[0]
                                extension=SAC[i2].variInfo.object(ivari).x[1]
                                setpointer temp.capre, SAC[i2].dend[whatdend].cai(extension) 
                                SAC[iSAC].receivesCl.append (temp)                   //i2 provides the gaba isac receives it
                                temp= new Vector(3)
                                temp.x[0]=i2 //SAC they're from
                                temp.x[1]=whatdend-numInside //outerdend they're from 
                                temp.x[2]=idend //which dend they synapse onto
                                SAC[iSAC].fromList.append(temp)
                    
                            }
                        }
                    } else{
                        continue
                    }                                                        
                }
            }
        }
    }
}
proc fakeinhibition(){
    //if I just set it
    firstring=0
    position=.5
    switchsides=0
    if(firstring){
        if(switchsides==0){
            num1=0
            num2=3
        }else{
            num1=3
            num2=0
        }
    }else{
        if(switchsides==0){
            num1=6
            num2=12
        }else{
            num1=12
            num2=6
        }
    }
    for idend=0,numFirst-1{
        
        access SAC[chosenSAC].dend[idend]
            
        temp=new AlphaSynapseG(abs(position))
        //if I just set it
        /*
        shifty=65
        if(idend==num1){
            temp.onset=((Xorg.x[chosenSAC]))*bipspeed +50+dendL +shifty //"right"
        }else{
            temp.onset=((Xorg.x[chosenSAC]))*bipspeed +50+dendL -shifty
        }
        */
        temp.onset=0
        //temp.onset=((x3d(0)+(x3d(1)-x3d(0)/2))*bipspeed +50+dendL) //where it is located
        //((Xorg.x[chosenSAC]))*bipspeed +50+dendL //whevever the middle gets hit
        //temp.tau=fitau
        //temp.gmax=figmax
        temp.e=fie
        ConductanceVectorList.object(idend).play(&temp.g, .025)
        
        fakeinhibitions.append(temp)
    }
}
proc fakeinhibition2(){
    fileob2.ropen("ConductanceVectorLocMoveLeft.txt") //change left right
    ConductanceVectorLoc=new Vector()
    ConductanceVectorLoc.vread(fileob2)
    fileob2.close()
    for i=0, ConductanceVectorLoc.size()-1{ 
        strdef st
        sprint(st, "ConductanceVectorMoveLeft%d.txt", i)  //change left right
        fileob.ropen(st)
        gvec=new Vector()
        gvec.vread(fileob)
        if(expandcollapse){
            access SAC[chosenSAC].dend[ConductanceVectorLoc.x[i] ]  //access where it was originally synapsing onto
            pos=(x3d(0)-((x3d(0)-x3d(1))/2))-Xorg.x[chosenSAC]
            shift= round(pos*fifactor)   
            if(shift>0){
                temp4=new Vector(shift) //add so it's later
                gvec.insrt(0,temp4)
            }else if( shift<0){  //subtract so it's earlier
                shift=abs(shift)
                gvec.remove(0, shift-1)
            }
            gvec.resize(tstop+1)
        }
        if(shiftingt){
            if(shiftt>0){
                temp4=new Vector(shiftt)
                gvec.insrt(0, temp4)
            }else if(shiftt<0){
                shift=abs(shiftt)
                gvec.remove(0, shift-1)
            }
            gvec.resize(tstop+1)
        }
        if(everythinginthesoma){
            access SAC[chosenSAC].soma
        }else if(everythingontheoutside){
            odend=numInside+8*ConductanceVectorLoc.x[i]
            adding=(countvec.x[ConductanceVectorLoc.x[i]])%(2^3) //remainder when %8 means 8=0 and we cycle again
            access SAC[chosenSAC].dend[odend +adding]
            countvec.x[ConductanceVectorLoc.x[i]]=countvec.x[ConductanceVectorLoc.x[i]] +1 //add one to whichever element of countvec we correspond to
            ConductanceVectorNewLoc.append(odend +adding)
        }else{
            access SAC[chosenSAC].dend[ConductanceVectorLoc.x[i] ]
        }
        temp=new AlphaSynapseG(.5)
        gvec.play(&temp.g,1)   
        temp.e=-65
        asgConductanceList.append(gvec)
        fakeinhibitions.append(temp)
        fileob.close() 
    }
    
  
}

proc clampsetup(){
    del=500
    dur=200
    access SAC[$1].soma
    clamps[0]=new VClamp(.5)
    clamps[0].dur[0]=tstop
    clamps[0].amp[0]=0

    access SAC[$2].soma
    clamps[1]=new VClamp(.5)
    clamps[1].dur[0]=del
    clamps[1].amp[0]=-70
    clamps[1].dur[1]=dur
    clamps[1].dur[2]=tstop-del-dur
    clamps[1].amp[2]=-70
}

proc belongstobranch(){  //Does bip $1 belong to branch $2 (0-5)
    n= int($1/2)
    gate= $2*8+6*7
    for (i=3; i>=0; i=i-1){
        if((n-gate>-1)&&((n-gate)< (2^(i)))){
            belongs=1
            break
        }
        gate=gate-(6*2^(i-1))-($2*2^(i-1))
    }
    return
}

proc update(){
    clampingdend1=clampingdend

    bipG1=expbipG1*expcontrast   
    bipG2=expbipG2*expcontrast

    for i=0,numSACs-1{
        for ibipSyn=0, SAC[i].bipSynapses.count()-1{
            SAC[i].bipSynapses.object(ibipSyn).g1max=bipG1
            SAC[i].bipSynapses.object(ibipSyn).g2max=bipG2
        }
    }

    forall {
        e_pas=dendepas
        g_pas=dendgpas	
        gkbar_kv=kv_gmax	
    }
    for i=0,numSACs-1{
        forsec SAC[i].EndDends{
            shift_calrgc=cachannelshift
            gbar_calrgc=cachannelg
        }
    }

}

proc vecupdate(){
    objectvar temp
    for i=0,numSACs-1{
        forsec SAC[i].EndDends{
            temp=new Vector()
            temp.record(&m_calrgc(.8),1)
            SAC[i].MrecList.append(temp)
        }
    }                     
}

proc procSimpleClamp(){

    access SAC[0].soma
    clamps[1]=new VClamp(.5)
    clamps[1].dur[0]=tdel
    clamps[1].dur[1]=tdur
    clamps[1].dur[2]=tstop-tdel-tdur
    clamps[1].amp[2]=bottom
    clamps[1].amp[0]=bottom
    clamps[1].amp[1]=destination
    vecupdate()
    testg3=SAC[chosenSAC]. MrecList().object(clampingdend1-42)
    xopen("BuildGUI1.ses")
    run()
    graphG8()
    

} 

proc CurrentvsContrast(){
    fileob.wopen("CurrentvsContrast.txt")
    fileob.printf("LCAI, LM, LV, RCAI, RM, RV \n")
    for (expcontrast=.1; expcontrast<=.9; expcontrast+=.025){
        update()
        run()
        fileob.printf("%g %g %g %g %g %g \n",SAC[0].CAIrecList().object(27).max(), SAC[0].MrecList().object(27).max(), SAC[0].VrecList().object(27).max(), SAC[0].CAIrecList().object(3).max(),SAC[0].MrecList().object(27).max(), SAC[0].VrecList().object(3).max())
    }
    fileob.close()
}

proc Ggraph(){
    IBIPrecList.object($1*2).plot(g12)
    IBIPrecList.object($1*2 +1).plot(g12)
}
proc Ggraphc(){
    IBIPrecList.object($1*2).plot(g12,6,1)
    IBIPrecList.object($1*2 +1).plot(g12,6,1)
}

proc placeSAC(){  //sets the positions of the SACs
    chosenSAC=0
    if(network1){    
        ssdist=60
        griddim=300/ssdist +5
        //numSACs=1
        numSACs=griddim*griddim
    } else if(network2){
        ssdist=75
        placementfreedom=.25
        griddim=3
        numSACs=griddim*griddim
        chosenSAC=numSACs/2  //if griddim is odd this is the central SAC
    }else if(DingNetwork){
        numSACs=7
    }else if(fakenetwork){
        numSACs=1
    }else{

    }
    
    
    thetas = new Vector(numSACs)
    for i=0,numSACs-1{
        thetas.x[i]=angle
    }

    makepos=(griddim*ssdist/2) +50
    if(network1){ //I'll worry about this later
        /*
        Xorg= new Vector(numSACs,0)
        Yorg= new Vector(numSACs,0)
        Xorg.x[0]=60
        Yorg.x[0]=60
        */
        /*
        Xorg= new Vector(numSACs,0)
        Yorg= new Vector()

        for irow=0,griddim-1 {
            for i=0,griddim-1{
                Yorg.append(irow*ssdist)
            }
        }
        for icol=0,griddim-1{
            for i=0,griddim-1{
            Xorg.x[icol+griddim*i]=(icol*ssdist)
            }
        }
        likelySAC=.1
        */
        
        ranCord=new Random()
        ranCord.uniform(0,(griddim-1)*ssdist)

        Xorg=new Vector(numSACs)
        Yorg=new Vector(numSACs)
        for i=0, numSACs-1{
            Xorg.x[i]=ranCord.repick()
            Yorg.x[i]=ranCord.repick()
        }
    }else if(network2){
        freedom= new Random()
        freedom.uniform((-ssdist/2)*placementfreedom,(ssdist/2)*placementfreedom)
        Xorg=new Vector(numSACs)
        Yorg=new Vector(numSACs)
        for icolumn=-griddim/2, icolumn=(griddim/2)-1{
            counter=icolumn+ (griddim/2)
            for ix=0, ix=griddim-1{
                Xorg.x[ix+counter*griddim]=ssdist*(icolumn)+ (ssdist/2) +freedom.repick() +makepos//left edge of the box plus half way
            }
        } 
        for irow=-griddim/2, irow=(griddim/2)-1{
            counter=irow+ (griddim/2)
            for iy=0, iy=griddim-1{
                Yorg.x[(griddim*iy)+counter]=ssdist*(irow)+ (ssdist/2)+ freedom.repick() +makepos//bottom edge of the box plus half way
            }
        }       
    }else if (DingNetwork||fakenetwork){
        Xorg=new Vector(numSACs)
        Yorg=new Vector(numSACs)  
        if(rabbit){
            ssdist=(dendL*2 )-10
        }else{
            ssdist=dendL
        }
        centerX=dendL+ssdist
        centerY=(sin (PI/3)*dendL*2)
        Xorg.x[0]=centerX
        Yorg.x[0]=centerY
        if(DingNetwork){
            for j=0, numSACs-2{
                an=j*(PI/3)
                Xorg.x[j+1]=centerX+(cos(an)*ssdist)
                Yorg.x[j+1]=centerY+(sin(an)*ssdist)
            }
        }


    }else if(TwoSACLeeExperiment){ //||clchannelcheck||ThreeSACVGCCcheck 
        Xorg= new Vector(numSACs,0)
        Yorg= new Vector(numSACs,0)
        Xorg.x[1]=120
        if(ThreeSACVGCCcheck){
            Xorg.x[2]=-120
        }
    
    }else {
        Xorg= new Vector(numSACs,0)
        Yorg= new Vector(numSACs,0)
    }
}