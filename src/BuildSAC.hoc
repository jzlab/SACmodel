begintemplate star
    external numGen, numFirst, numDend, somaL, dendD0, dendL, dendD1, cachannelshift, cachannelg, numOutside
    external bipDensity, bipMaxDist, nodends, VGKCMaxDistance, kv_gmax, kv_h_50, kv_n_50, kv_n_slope, kv_h_slope, kv_ntau_50
    external kv_htau_50, kv_ntau_slope, kv_htau_slope, kv_ntau_max, kv_htau_max, kv_nN, dendgpas, dendepas
    public soma, dend, bipSynapses, VrecList, VrecXpos, VrecYpos, variAngle, trueAngle, ICArecList, CAIrecList, receivesCl, fromList, IKrecList
    public InnerXpos, InnerYpos, CalciumChannel, CalciumCurrent, MrecList, gangConnects, fauxvari, fauxvarirelease, fauxvaricurrent, EndDends
    create soma, dend[2] 
    objectvar temp, bipSynapses, VrecList, VrecXpos, VrecYpos, variAngle, trueAngle, ICArecList, CAIrecList, receivesCl, fromList, IKrecList
    objectvar InnerXpos, InnerYpos, CalciumChannel, CalciumCurrent, MrecList, gangConnects, fauxvari, fauxvarirelease, fauxvaricurrent, EndDends
    
    proc Morph(){
        objectvar temp
        for idend=0, numFirst-1 {
            connect dend[idend](0),soma(0)
            access dend[idend]
            pt3dadd($1,$2,0,dendD0)      
        }
       
        for igen=0, numGen-1 {
            rad=dendL*(igen+1)/numGen
            numD_gen=numFirst*2^(igen)
            dendDiam=(dendD0-dendD1)*igen/numGen+dendD1
            dendDiamNext= (dendD0-dendD1)*(igen+1)/numGen+dendD1
            
            for idend=0,numD_gen-1{
                access dend[idend+GenCount]
                locx=rad*cos((idend+rotate)*2/numD_gen*PI)
                locy=rad*sin((idend+rotate)*2/numD_gen*PI)
                pt3dadd(locx+$1,locy+$2,0,dendDiam)          //---last point on original dend
                    if (GenCount==0)  { 
                    InnerXpos.append(x3d(0)+(x3d(1)-x3d(0))*(.5))
                    InnerYpos.append(y3d(0)+(y3d(1)-y3d(0))*(.5))
                    }
                nseg=5
                
                if (igen<numGen-1) {                         //---before last generation - do put 0 point for next generation 2 dends
                    access dend[idend*2+GenCount+numD_gen]
                    pt3dadd(locx+$1,locy+$2,0,dendDiamNext)
                    connect dend[idend*2+GenCount+numD_gen](0), dend[idend+GenCount](1)
                    
                    access dend[idend*2+GenCount+numD_gen+1]
                    pt3dadd(locx+$1,locy+$2,0,dendDiamNext)
                    connect dend[idend*2+GenCount+numD_gen+1](0), dend[idend+GenCount](1)
                }else{
                    EndDends.append()
                    temp=new Vector()
                    temp.record(&v(0.8),1)
                    VrecList.append(temp)
                    VrecXpos.append(x3d(0)+(x3d(1)-x3d(0))*(.8))
                    VrecYpos.append(y3d(0)+(y3d(1)-y3d(0))*(.8))
                    
                    
                        temp=new Vector()           //voltage to current to concentration
                        insert calrgc
                        shift_calrgc=cachannelshift
                        gbar_calrgc=cachannelg
                        temp.record (&ica(.8),1)
                        ICArecList.append(temp)

                        temp= new Vector()         
                        insert cadiff
                        temp.record (&cai(.8),1)
                        CAIrecList.append(temp)
                        
                        CalciumChannel.append()
                    
                }
                
            }
            rotate=-.5- (igen^1.5)
           // rotate=-.5-(igen*(3/2))
            GenCount+=numD_gen
        }
    }
    proc placeVGKC(){
        forall{
                insert kv
                //Kchannell info
                gkbar_kv=kv_gmax
                n_50_kv=kv_n_50
                h_50_kv=kv_h_50
                n_slope_kv=kv_n_slope
                h_slope_kv=kv_h_slope
                ntau_50_kv=kv_ntau_50
                htau_50_kv=kv_htau_50
                ntau_slope_kv=kv_ntau_slope
                htau_slope_kv=kv_htau_slope
                ntau_max_kv=kv_ntau_max
                htau_max_kv=kv_htau_max
                nN_kv=kv_nN
            }
            for iOut=0, numOutside-1{
                access dend[iOut]
                temp= new Vector()
                temp.record(&ik(.8),1)
                IKrecList.append(temp)
            }
         
    }
    proc placeBip(){
        objectvar temp
        distance()                  //set origin as soma(0)
        bipSynapses=new List()
        
        for idend=0, numDend-1{
            access dend[idend]
            numSyn=int(L/bipDensity)
            for iS_D=0, numSyn-1{
                loc=(iS_D+1)/(numSyn+1)
                if (distance((loc))<bipMaxDist){

                    temp=new Bip(loc)
                    temp.locx= x3d(0)+(x3d(1)-x3d(0))*(loc)
                    temp.locy= y3d(0)+(y3d(1)-y3d(0))*(loc)
                    temp.e=0
                    bipSynapses.append(temp)
                }
            }
        }
    }

    proc init(){
        //print $1,$2
        create soma
        access soma
        if (nodends){
            soma.diam=100
            soma.L=100
        }

        pt3dadd($1,$2,0,somaL)
        pt3dadd($1,$2,somaL,somaL)
        if(nodends){break}
        create dend[numDend]
        
        VrecList=new List()
        InnerXpos= new Vector()
        InnerYpos= new Vector()
        VrecXpos=new Vector()
        VrecYpos=new Vector()
        variAngle=new Vector()
        trueAngle= new Vector()
        ICArecList=new List()
        IKrecList=new List()
        CAIrecList= new List()
        receivesCl= new List()
        fromList= new List()
        MrecList= new List()
        fauxvari=new List()
        fauxvarirelease=new List()
        fauxvaricurrent=new List()
        EndDends=new SectionList()
        gangConnects=new Vector(3)
        gangConnects.x[0]=0
        gangConnects.x[1]=0
        gangConnects.x[2]=0
        CalciumChannel=new SectionList()
        
        GenCount=0
		rotate=0
        
        Morph($1,$2)
        forall{
            insert pas
            g_pas=dendgpas
            e_pas=dendepas
        }
        access soma
        placeBip()
        access soma
        placeVGKC()
    }
endtemplate star

begintemplate fauxring
    external numOutside, dendD0, dendL, numGen, dendgpas, dendepas, kv_gmax, kv_h_50, kv_n_50, kv_n_slope, kv_h_slope, kv_ntau_50
    external kv_htau_50, kv_ntau_slope, kv_htau_slope, kv_ntau_max, kv_htau_max, kv_nN
    public dend
    create dend[2]

    proc init(){
        create dend[numOutside]
        for i=0, numOutside-1{
            access dend[i]
            diam=dendD0
            L=dendL/numGen
            insert pas
            g_pas=dendgpas
            e_pas=dendepas

            insert kv
            //Kchannell info
            gkbar_kv=kv_gmax
            n_50_kv=kv_n_50
            h_50_kv=kv_h_50
            n_slope_kv=kv_n_slope
            h_slope_kv=kv_h_slope
            ntau_50_kv=kv_ntau_50
            htau_50_kv=kv_htau_50
            ntau_slope_kv=kv_ntau_slope
            htau_slope_kv=kv_htau_slope
            ntau_max_kv=kv_ntau_max
            htau_max_kv=kv_htau_max
            nN_kv=kv_nN
        }
    }

endtemplate fauxring

begintemplate ganglion
    external gangL, dendD0, somaL, numgangDend, bipDensity
    public soma, dend, receivesCl, fromList, bipSynapses
    objectvar receivesCl[2], fromList, temp, bipSynapses
    create soma, dend[2]
    proc placeBip(){
        objectvar temp
        distance()                  //set origin as soma(0)
        bipSynapses=new List()
        
        for idend=0, numgangDend-1{
            access dend[idend]
            numSyn=int(L/bipDensity)
            for iS_D=0, numSyn-1{
                loc=(iS_D+1)/(numSyn+1)
                temp=new Bipg(loc)
                temp.locx= x3d(0)+(x3d(1)-x3d(0))*(loc)
                temp.locy= y3d(0)+(y3d(1)-y3d(0))*(loc)
                temp.e=0
                bipSynapses.append(temp)
                
            }
        }
    }
    proc init(){
        objectvar receivesCl[numgangDend]
        for w=0,numgangDend-1{
            receivesCl[w]=new List()
        }
        fromList=new List()
        print $1,$2
        create soma
        create dend[numgangDend]
        access soma
        pt3dadd($1,$2,0,somaL)
        pt3dadd($1,$2,somaL,somaL)

         for idend=0, numgangDend-1 {
            connect dend[idend](0),soma(0)
            access dend[idend]
            pt3dadd($1,$2,0,dendD0)      
            pt3dadd($1+gangL*cos(idend*((2*PI)/numgangDend)), $2+gangL*sin(idend*(2*PI)/numgangDend),0, dendD0)
            nseg=20
        }
        access soma
        placeBip()
    }

endtemplate ganglion

begintemplate simple
external cachannelshift, cachannelg
public soma, receivesCl, ICArecList, CAIrecList
objectvar receivesCl, ICArecList, temp, CAIrecList
create soma
proc init(){
    receivesCl=new List()
    ICArecList=new List()
    CAIrecList=new List()
    create soma
    access soma
    insert calrgc
    shift_calrgc=cachannelshift
    gbar_calrgc=cachannelg
    temp= new Vector()
    temp.record (&ica(.5),1)
    ICArecList.append(temp)
    temp= new Vector()         
    insert cadiff
    temp.record (&cai(.5),1)
    CAIrecList.append(temp)
    
}
endtemplate simple

