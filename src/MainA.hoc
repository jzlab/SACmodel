GanglionExperiment=0
SingleSACExperiment=1
SingleSACDingExperiment=0
TwoSACLeeExperiment=0

network1=0 //probably not
network2=0
DingNetwork=1
rabbit=1 //positions them far apart
fakenetwork=0
tracetheg=0


//-----------------------------------BEGIN PARAMETERS
tstop=1000
angle=0
//SAC cell morphology
numSACs=1
nodends=0
numGen=4
numFirst=6
numDend=0
numInner=0
somaL=10
dendD0=.5
dendL=140
dendD1=0.2
dendgpas=.0008//normally//.001 old//.0002 if it's a twosaclee
dendepas=-60//-70//
dendRa=100  //axial resistivity
for igen=0,numGen-1{
numDend+=numFirst*2^(igen)
}
numOutside=numFirst*2^(numGen-1) //48
numInside=numDend-numOutside //42
for igen=0, 1{
    numInside2+=numFirst*2^(igen) //19 //when do I use this?
}

//bip placement
amountoflowcontrast=1
bipDensity=15
bipMaxDist=75
bipspeed=.7
contrast=.8
bipG1=1
bipG2=.2

variDensity=15

//SAC connection
SACmaxDist=15
connectfar=1
if (connectfar){
    SACmaxDist=30
}

//complex cl channel
clchannelthres=.2//.008
clchannelscaling=.125//59.35//8.75//.00000016//8//.000004//70 //max capre^4 makes probrelease =1 (err on the side of 1.1)
clchannelamp=8//.09
clchanneltau1=10
clchanneltau2=3
clchannelgbar=100
//calrgc vgcc
cachannelshift=15//10
cachannelg=.002//.005
cachanneltranslation=0
   
//K Channel
kv_gmax=0//50
kv_n_50=-20
kv_n_slope=-.04
n_base_kv=.1
kv_h_50=-60
kv_h_slope=.15
h_base_kv=.05
kv_ntau_50=-30
kv_ntau_slope=0
kv_ntau_max=1
kv_htau_50=0
kv_htau_slope=0
kv_htau_max=10
kv_nN=1
kv_spread_min=0
kv_spread_mas=200
e_kv=-70
VGKCMaxDistance=200

//Gang building
gangL=150
numgangDend=12
SACgangDist=15

//fake inhibition
if(fakenetwork){
    fitau=20
    figmax=1
    fie=-65
    expandcollapse=0
    if(expandcollapse){
        fifactor=0
    }
    shiftingt=0
    if(shiftingt){
        shiftt=0
    }
    everythinginthesoma=0
    everythingontheoutside=1
}
CalciumConductance=.05
 
//-----experiment presets

if (SingleSACExperiment){
    tstop=1600
    bipspeed=.1
    contrast=.6
    dt=0.1
}
if(TwoSACLeeExperiment){
    numSACs=2
    contrast=0
    tstop=1500
    dendgpas=.0002//
}

if (SingleSACDingExperiment){
    tstop=800
    contrast=.5
}
    
    //-------------------------------END PARAMETERS
    //---------------------------
    numSimp=2
    top=20
    numclamps=2
    chosenSAC=0
    objectvar testg, testg2, g6, g5, g7, g8, g9, g4, g10,g12, testg4, testg3, testg5, SAC[numSACs], fileob, g, voltagevec, timevec, maxdifvec, clamps[numclamps], clampcurrent, without[top], with[top], FauxRing[2], simplething, emptyvec, vspot[top]
    objectvar voltagejumps, randSAC, Gang, temp, currentmaxs, differencemin, List1, List2, temp2, difference[top], Simple[numSimp], vec1, vec2, randSACs, randCon
    objectvar caivec, caiwithout[top], caiwith[top], caidifference[top], icawithout[top], icawith[top], icadifference[top], vspot[top], excitevec, IBIPrecList, inhibitvec, ISACrecList, contrastvec,  inhibitvecL, inhibitvecR, excitevecL, excitevecR, emptyvec,  histvec, whichconnection, whichbip, whichdend, imagbip, imagbipselect, fakeinhibitions,  ConductanceVectorList, inhibitveclist, thetas, fileob2, ConductanceVectorLoc, ConductanceVectorList, asgConductanceList, temp4, gvectimes,gvec, countvec, ConductanceVectorNewLoc
    testg=new Vector()
    testg2=new Vector()
    testg3=new Vector()
    testg4=new Vector()
    testg5=new Vector()
    g4=new Graph()
    g6=new Graph()
    g5=new Graph()
    g7=new Graph()
    g8=new Graph()
    g9=new Graph()
    g10=new Graph()
    g12 =new Graph()
    fileob= new File()
    fileob2=new File()
    g=new Graph()
    g10= new Graph()
    contrastvec=new Vector()
    voltagevec=new Vector()
    caivec=new Vector()
    timevec= new Vector()
    maxdifvec=new Vector()
    clampcurrent=new Vector()
    currentmaxs=new Vector()
    voltagejumps=new Vector()
    randSAC=new Random()
    randSAC.uniform(0,1)
    randSACs=new Random(10)
    randSACs.uniform(0,numSACs-1)
    randCon=new Random()
    differencemin=new Vector()
    for i=0, top-1{
        without[i]=new Vector()
        with[i]=new Vector()
        difference=new Vector()
        caiwithout[i]=new Vector()
        caiwith[i]=new Vector()
        caidifference[i]=new Vector()
        icawithout[i]=new Vector()
        icawith[i]=new Vector()
        icadifference[i]=new Vector()
        vspot[i]=new Vector()
    }
    List1=new List()
    List2=new List()
    vec1=new Vector()
    vec2=new Vector()
    excitevec= new Vector(5, 17)
    excitevecL =new Vector()
    excitevecR= new Vector()
    inhibitvec= new Vector(5, 3)
    inhibitvecL=new Vector()
    inhibitvecR=new Vector()
    emptyvec=new Vector(tstop+1, 0)
    IBIPrecList =new List()
    ISACrecList= new List()
    histvec= new Vector()
    whichbip=new Vector()
    whichdend=new Vector()
    imagbip=new Vector()
    imagbipselect=new Vector()
    fakeinhibitions=new List()
    ConductanceVectorList= new List()
    inhibitveclist= new List()
    asgConductanceList=new List()
    gvectimes=new Vector()
    countvec=new Vector(numFirst)
    ConductanceVectorLoc=new Vector()
    ConductanceVectorNewLoc=new Vector()

objectvar Xorg, Yorg
objectvar ranCord, freedom


    FileNumber=1
    load_file("nrngui.hoc")
    load_file("BuildSAC.hoc")
    load_file("Delay_ConnectSAC.hoc")
    load_file("testingSAC.hoc")
                                                                                                                                                              

    //gui
    if(1==0){
		xpanel("Params")
			xvalue("Contrast", "contrast" , 1, "update()")
            xvalue("bipG1")
            xvalue("bipG2")
			xvalue("E pas", "dendepas" , 1, "update()")
			xvalue("G pas", "dendgpas" , 1, "update()")
            xvalue("cachannelshift", "cachannelshift", 1, "update()")
            xvalue("cachannelg","cachannelg", 1, "update()")
            xvalue("kv_gmax", "kv_gmax", 1, "update()")
            xbutton("CurrentvsContrast", "CurrentvsContrast()")
            /*
            if(SimpleClamp){
                xvalue("clampingdend", "clampingdend", 1, "")
            }
            */
        xpanel(400,400)
    }
    
    //------------------------------------------EXPERIMENTS


if(GanglionExperiment){
    //-----------------------------------------------BUILDING PHASE
    print "GanglionExperiment"
    running=1
    //experiments to choose from
    ds=1
    vclamping=0
    printaboutconnections=0
    
    if(network1){
        gango=((griddim)*ssdist/2)}
    if(network2){
        gango=0+makepos
    }
    //-------------------BUILD
    {}
        Gang=new ganglion(gango,gango)
        build()
        if(nodends){break}
        delay()
        connecting()
        if(ds){
            gangdelay()
        }
        if(vclamping){
            access Gang.soma  
            clamps[0]=new VClamp(.5)
            clamps[0].dur[0]=tstop
            clamps[0].amp[0]=0
            /* to turn off bip synapses
            for ibipSyn=0, Gang.bipSynapses.count()-1{
                Gang.bipSynapses.object(ibipSyn).g1max=0
                Gang.bipSynapses.object(ibipSyn).g2max=0
            }
            */
        }

        //Connect gang and SACs //put this in a procedure?
            
        for i2=0, numSACs-1{           //over all varicosities
            for ivari=0, SAC[i2].VrecList.count()-1{
                x=SAC[i2].VrecXpos.get(ivari)
                y=SAC[i2].VrecYpos.get(ivari)
                relx=x-gango
                rely=y-gango
                if(sqrt(relx*relx+rely*rely)< gangL+SACgangDist){
                    for idend=0, numgangDend-1 {               //over all dendrites
                        access Gang.dend[idend]
                        ang=idend*(2*PI)/numgangDend
                        sameside=1
                        if (abs(sin(ang))<.05){
                            thres=SACgangDist
                            prime=rely
                            slidethres=-SACgangDist
                            inquestion=relx
                            if(abs(ang-PI)<.05){
                                inquestion=-inquestion
                            }
                        }else{
                            if(abs(cos(ang))<.1){
                                prime=relx
                                thres=(SACgangDist/sin (ang))
                            }else{
                                if(abs(sin(ang))<.7){
                                    thres=SACgangDist/cos(ang)
                                    prime=abs((relx/cos(ang)))-abs(rely)
                                    if (relx!=0){
                                        if((cos(ang)/relx)<0){sameside=0}
                                    }
                                }else{
                                    thres=(SACgangDist/sin (ang))
                                    prime=(relx-(rely/(sin(ang)/cos(ang))))
                                }
                            }
                            slidethres=(-SACgangDist)/sin(ang)
                            inquestion=rely
                            if(sin(ang)<0){
                            inquestion=-inquestion
                            slidethres=-slidethres
                            }
                        }
                        if(abs(prime)<=abs(thres)&&inquestion>=slidethres&&sameside){
                            place=sqrt(relx*relx+rely*rely)/gangL
                            if (place>1){place=1}
                            access Gang.dend[idend]
                            xplace=gango+(x3d(1)-x3d(0))*place
                            yplace=gango+ (y3d(1)-y3d(0))*place
                            yy=yplace-Yorg.x[i2]
                            xx=xplace-Xorg.x[i2]

                            indep=(atan2(yy,xx))
                            dep= (1/sqrt(2*PI*3))*exp(-(indep*indep*indep*indep*indep*indep*indep*indep)/(2*3))
                            likelySAC=.06+(dep*4.1)

                            if(abs(atan2(yy,xx))>(3*PI/4)){  //pd    //this doesn't decide where they go; it just shows a little bit of how they are distributed
                                either=2
                            }else   if(abs(atan2(yy,xx))<(PI/4)){ //nd
                                either=0
                            }else{
                                either=1
                            }
                            if(randSAC.repick()<likelySAC ){

                                temp=new ComplexCl2g(place)
                                setpointer temp.capre, SAC[i2].dend[42+ivari].cai(.8)
                                Gang.receivesCl[idend].append (temp)
                                SAC[i2].gangConnects.x[either]=SAC[i2].gangConnects.x[either]+1
                                temp= new Vector(3)
                                temp.x[0]=i2  //what SAC is it from
                                temp.x[1]=idend //what ganglion dendrite does it go to
                                temp.x[2]=indep //????
                                Gang.fromList.append(temp)
                                
                            }
                        }   
                    }
                }
            }
        }
    //everything has been delayed and connected appropriately
    //---------------------------------------------------EXPERIMENTAL SETUP PHASE
    if(printaboutconnections){
        sacconnects=0
        for iS= 0, numSACs-1{
            sacconnects=sacconnects+SAC[iS].receivesCl.count()
            averagenuminputs=sacconnects/(numSACs)
        }
        print "average number of inputs a SAC receives ", averagenuminputs

        fileob.wopen("GangExperimentConnectionTest.txt")
        for i=0, Gang.fromList.count()-1{
            i2=Gang.fromList.object(i).x[0] //which SAC
            fileob.printf("%g %g %g \n", Xorg.x[i2], Yorg.x[i2], Gang.fromList.object(i).x[2]) //xpos of origin, ypos of origin, ???
        }
        fileob.close()

        pdtotal=0
        ndtotal=0
        btwtotal=0
        sactotal=0
        for i2=0, numSACs-1{
            ndtotal=ndtotal+SAC[i2].gangConnects.x[0]
            pdtotal=pdtotal+SAC[i2].gangConnects.x[2]
            btwtotal=btwtotal+SAC[i2].gangConnects.x[1]
            if(SAC[i2].gangConnects.x[0]>0||SAC[i2].gangConnects.x[1]>0){
                sactotal+=1
            }
        }
        print"totals ", sactotal, ndtotal, btwtotal,pdtotal  //not very informative
    }
    if(vclamping){
        clampcurrent.record(&clamps[0].i,1) //record from ganglion soma
    }
    if (ds){
        voltagevec.record(&Gang.soma.v(.5),1)
    }

    //----------------------------------------------RUNNING EXPERIMENT PHASE
    if(running){
        if(vclamping){
            run()
            fileob.wopen("GangExperimentIPSC.txt")
            for i=0, clampcurrent.size()-1{
                fileob.printf("%g \n",clampcurrent.x[i])
            }
            fileob.close()
        }
        if(ds){
            run()
            fileob.wopen("GangExperimentI.txt")
            for i=0, voltagevec.size()-1{
                fileob.printf("%g \n",voltagevec.x[i])
            }
            fileob.close()
        }
    }
}                                                 
if(TwoSACLeeExperiment){
    //objective 2 probably workls
    print "TwoSACLeeExperiment"
    takingtrace=1
    vto=-25    

    placeSAC()
    objectvar SAC[numSACs]
    build()
    setg()
    connecting()
    
        //clamp setup 
        
        if(network2){
            print "network"
            numneighbors=0
            while (numneighbors<50){
                whichSAC=randSACs.repick()
                numneighbors=SAC[whichSAC].receivesCl.count()
                print "attempt"
            }
            randCon.uniform(0,SAC[whichSAC].fromList.count-1)
            iinput=randCon.repick()
            neighborSAC=SAC[whichSAC].fromList.object(iinput).x[0]
        
            connectcount=0
            for i=0, SAC[whichSAC].fromList.count-1{
                if(SAC[whichSAC].fromList.object(i).x[0]==neighborSAC){
                    connectcount=connectcount+1
                }
            }
            print "how many inputs this SAC receives from neighbor SAC ", connectcount
            firstSAC=whichSAC
            secondSAC=neighborSAC  //which SAC is the one we observe. neighbor SAC is the one with the voltage changes
        }else{      
            firstSAC=0
            secondSAC=1
        }
        
        clampsetup(firstSAC,secondSAC)

        testg4.record(&SAC[a].receivesCl.object(b).capre,1)
        clampcurrent.record(&clamps[0].i,1) //record from postsyn soma
        if(takingtrace){
            a=firstSAC                        //cd synapse onto ab
            if(network2){
                b=iinput
            }else{
                b=0
            }
            c=SAC[a].fromList.object[b].x[0]
            d=SAC[a].fromList.object[b].x[1]
            //testg.record(&SAC[c].soma.i(.5),1)
            //testg.record(&SAC[a].dend[42+b].v(.5),1)
            print "abcd", a, b, c, d

            testg.record(&SAC[a].receivesCl.object(b).probrelease, 1)
            testg2.record(&SAC[a].receivesCl.object(b).numreleased,1)
            testg3.record(&SAC[a].receivesCl.object(b).i,1)
            

        
            clamps[1].amp[1]=vto
            run()
            graphG6()
            graphG7()
            graphG8()
            graphG9()
            fileob.wopen("TwoSACExperimentLeeITrace.txt")
            for i=0, clampcurrent.size()-1{
                fileob.printf("%g \n",clampcurrent.x[i])
            }
            fileob.close()
            //graphG8()
            //graphG6()
            //graphG7()
            //graphG5()
            //graphG4()
            //graphG9()
        }else{
            for i2=0, 9{              
                clamps[1].amp[1]=-65+10*i2
                run()
                voltagejumps.append(clamps[1].amp[1])
                //currentmaxs.append(clampcurrent.max(50, tstop)-clampcurrent.x[del/2])
                currentmaxs.append(testg4.max(50, tstop))
            }
            fileob.wopen("TwoSACExperimentLeeImaxes.txt")
            for i=0, currentmaxs.size()-1{
                fileob.printf("%g %g \n", voltagejumps.x[i], currentmaxs.x[i])
            }
            fileob.close()
        }


    
}
if (SingleSACDingExperiment){
    //objective 1.5
    takingtrace=0  //are we taking a trace
    whichvar=65-numInside    // if so, of which varicosity
    tracepd=0 //if so, in the preferred direction or no?

    placeSAC()
    objectvar SAC[numSACs]
    build()
    setg()
    savetrueangle()

    if (takingtrace) {        //how we loop
        startl=whichvar
        finishl=whichvar
    }else{
        startl=0
        finishl=numOutside/numFirst  //we divide by numFirst because it just repeats
    }

    for k=startl, finishl{
        thetas.x[chosenSAC]= SAC[chosenSAC].trueAngle.get(k)
        print "theta is ", thetas.x[chosenSAC] 
        delay()
        run()
        pdCAi=SAC[chosenSAC].CAIrecList.object(k).max() //changed it
        print pdCAi
        if(tracepd){break} //what we are tracing

        if(SAC[chosenSAC].trueAngle.get(k)>0){
            thetas.x[chosenSAC]= SAC[chosenSAC].trueAngle.get(k)-PI
        }else{
            thetas.x[chosenSAC]= SAC[chosenSAC].trueAngle.get(k)+PI
        }
        print "theta is ", thetas.x[chosenSAC]
        delay()
        run()
        ndCAi=SAC[chosenSAC].CAIrecList.object(k).max()  //changed it 
        print ndCAi
        dsi=(pdCAi-ndCAi)/pdCAi
        print"dsi", dsi
        if(takingtrace==0){maxdifvec.append(dsi)}
    }
    if(takingtrace){  //what we graph
        fileob.wopen("SingleSACDingExperimentCaTrace.txt")
        for i=0, SAC[chosenSAC].CAIrecList.object(k).size()-1{
            fileob.printf("  %g \n", SAC[chosenSAC].CAIrecList.object(k).x[i] ) //changed it
        }
        fileob.close()
    }else{
        fileob.wopen("SingleSACDingExperimentDSI.txt")
        for i=0, maxdifvec.size()-1{
            fileob.printf(" %g \n", maxdifvec.x[i])
        }
        fileob.close()
        print "mean", (maxdifvec.mean()), "std", (maxdifvec.stdev())

    }
}
if(SingleSACExperiment){

    DingNetworkLooping=1 //across speeds and contrasts
    if(DingNetworkLooping){
        if (batch>0){
            counter=0
            for (j=.6;j<=.6;j=j+.1){
                for (i=.5;i<=10;i=i+1){
                    for k=1,1{
                        DingNetwork=k
                        fakenetwork=0^k
                        bipspeed=i
                        contrast=j 
                        counter=counter+1
                        if(counter==batch){
                            break
                        }
                    }
                    if(counter==batch){
                            break
                    }
                }
                if(counter==batch){
                            break
                }
            }
        }
    }
    FakeNetworkLoopingTimes=0
    if(FakeNetworkLoopingTimes){
        if (batch>0){
            counter=0
            if(expandcollapse){
                for (k=0;k<=7;k=k+.5){
                    fifactor=k-4
                    counter=counter+1
                    if(counter==batch){
                        break
                    }
                }
            }else{
                for (k=0;k<=150;k=k+10){
                    shiftt=k-70
                    counter=counter+1
                    if(counter==batch){
                        break
                    }
                }
            }
        }
    }
    FakeNetworkLoopingPosition=0
    if(FakeNetworkLoopingPosition){ //kind of a mess
        if (batch>0){
            counter=0
            for j=0,1{
                if(j==0){
                    firstring=1
                }else{
                    firstring=0
                }
                for k=0,5{
                    if(k%2==0){ //if even
                        position=k/4
                        switchsides=0
                    }else{
                        position=-(k-1)/4
                        switchsides=1
                    }
                    counter=counter+1
                    if(counter==batch){
                        break
                    }
                }
                if(counter==batch){
                        break
                    }
            }
        }
    }
    placeSAC()
    
    objectvar SAC[numSACs]  //now that we have a new numSACS
    build()
    setg()
    delay()
    print " contrast=", contrast," speed=",bipspeed, "shiftt=",shiftt, " DingNetwork=", DingNetwork,"fakenetwork= ", fakenetwork, "expandcollapse=", expandcollapse, "everythinginthesoma=", everythinginthesoma, "rabbit=", rabbit

    saveendangle()  //save the angle relative to the direction of motion and our nullpref
    //bring in the inhibition
    if (network2||DingNetwork){
        connecting()
        print " we have connected"
        
    } else if (fakenetwork){
        fakeinhibition2()
    }else{
    }
    print "we've inhibited"
    xopen("AlphaSyn3.ses")
    

    numb= SAC[chosenSAC].bipSynapses.count() //recording excitatory g
    for i=0, numb-1{
        temp=new Vector()
        temp.record(&SAC[chosenSAC].bipSynapses.object(i).g,1) //current or conductance?
        IBIPrecList.append(temp)
    }
    if(network1||network2||DingNetwork){  //recording inhibitory g
        numc=SAC[chosenSAC].receivesCl.count() //how many inputs are we getting from other SACs
        ConductanceVectorLoc=new Vector()
        for i=0, numc-1{
            temp=new Vector()
            temp.record(&SAC[chosenSAC].receivesCl.object(i).g,1) //current or conductance?
            ISACrecList.append(temp)
            ConductanceVectorLoc.append(  SAC[chosenSAC].fromList.object(i).x[2]) //save what dend it's from)
        }
    }else if(fakenetwork){  //-------record fake inhibitory g
        for i=0, fakeinhibitions.count()-1{
            temp=new Vector()
            temp.record(&fakeinhibitions.object(i).g,1)
            ISACrecList.append(temp)
        }
    }
    /*
    a=0                         //cd synapse onto ab
    b=0
    c=SAC[a].fromList.object[b].x[0]
    d=SAC[a].fromList.object[b].x[1]
    print a,b,c,d
    testg.record(&SAC[a].receivesCl.object(b).before,1)
    testg2.record(&SAC[a].receivesCl.object(b).after,1)
    testg4.record(&SAC[a].receivesCl.object(b).numreleased,1)
    */
    
    run()
    /*
    testg3=testg.c.sub(testg2)
    graphG6()
    graphG7()
    graphG8()
    graphG9()
    */
    
    if(tracetheg){
        if(fakenetwork||DingNetwork){
            for i=0, ISACrecList.count()-1{
                testg=ISACrecList.object(i)
                graphG6()
            }
        }
    }
    //----record what time the conductance comes at relative to the center
    fileob.wopen("ConductanceVectorTimes.txt")    
    if(1==1) { //very useful for time shifting      
        for i=0, ISACrecList.count()-1{
            access SAC[chosenSAC].dend[ConductanceVectorLoc.x[i]]
            pos =(x3d(0)-((x3d(0)-x3d(1))/2))-Xorg.x[chosenSAC]
            fileob.printf("%g",pos )
            for it=0, ISACrecList.object(i).size()-1{
                if(ISACrecList.object(i).x[it]!=0){
                    fileob.printf(" %g\n" , it-PosToTime(Xorg.x[chosenSAC], Yorg.x[chosenSAC]))
                    break
                }else{
                    if(it==ISACrecList.object(i).size()-1){
                        fileob.printf(" %g\n", 0)
                    }
                }
            }
        }
    }
    fileob.close()

    //--------recording resulting conductances
    recordingConductances=0
    if(recordingConductances){
        print "recording conductances"
        strdef st
        if(DingNetwork||network2){
            fileob.wopen("ConductanceVectorLocMoveLeft.txt")
            ConductanceVectorLoc.vwrite(fileob)
            fileob.close()
            
            for i=0, ISACrecList.count()-1{
                sprint(st, "ConductanceVectorMoveLeft%d.txt", i)  
                fileob.wopen(st)
                ISACrecList.o(i).vwrite(fileob)
                fileob.close()
            }
            print "we have ", ISACrecList.count(), "conductance vectors"
        }
    }
    
    //--------first pass analysis
    for i=0, numOutside-1{
        caivec.append(SAC[chosenSAC].CAIrecList.object(i).max())
    }
    graphAngleCA()
    graphAngleV()
    Dend1=SAC[chosenSAC].nullpref.x[0]
    Dend2=SAC[chosenSAC].nullpref.x[1]
    print "DSI: ", (caivec.x[Dend1]-caivec.x[Dend2])/(caivec.x[Dend1]+caivec.x[Dend2])
    print "contrast=", contrast,  "speed=",bipspeed, "DingNetwork=",DingNetwork, "fakenetwork=",  fakenetwork, "fifactor=", fifactor
    
    //objective 3
    fileConductanceBubbleGraph() 
    
    //just a sample output (Does this work with Fake Inhibition?)
    
    if(DingNetwork||network2||fakenetwork){
        inhibitvecR= new Vector(ISACrecList.object(0).size()) 
        inhibitvecL= new Vector(ISACrecList.object(0).size())
        inhibitvec=new Vector(ISACrecList.object(0).size())
        for i=0, ISACrecList.count()-1{
            inhibitvec.add(ISACrecList.object(i))
            if(ConductanceVectorLoc.x[i]==0){  //right
                inhibitvecR.add(ISACrecList.object(i))
            }else if(ConductanceVectorLoc.x[i]==3){ //left
                inhibitvecL.add(ISACrecList.object(i))
            }
        }
        if(tracetheg){
            testg2=inhibitvec
            inhibitvecL.plot(g7,1,1)
            inhibitvecR.plot(g7,1,1)
            graphG7()
        }
    }


    excitevecR=new Vector(IBIPrecList.object(0).size())
    excitevecL=new Vector(IBIPrecList.object(0).size())
    excitevec=new Vector(IBIPrecList.object(0).size())
    for k=0, IBIPrecList.count()-1{
        belongs=0
        belongstobranch(k, 0)
        excitevec.add(IBIPrecList.object(k))
        if(belongs==1){
            excitevecR.add(IBIPrecList.object(k))
        } else{
            belongstobranch(k, 3)
            if(belongs==1){
                excitevecL.add(IBIPrecList.object(k))
            }
        }
    }
    
    testg=excitevecL
    excitevecR.plot(g6,1,1)
    excitevec.plot(g6,1,1)
    graphG6()
    
   
    //objective 1.0
    fileV_CAI_TuningCurves()
    fileEndTraces()

     print "we are here"

 
    //--------Come back to this
    if((FakeNetworkLoopingPosition||FakeNetworkLoopingTimes)){
        
        fileob.aopen("SingleSACFakeNetwork.txt")
       
        if(expandcollapse){ fileob.printf("%g %g \n", fifactor,  (caivec.x[3]-caivec.x[27])/(caivec.x[3]+caivec.x[27]) )}
        if(shiftingt){fileob.printf("%g %g \n", shiftt,  (caivec.x[3]-caivec.x[27])/(caivec.x[3]+caivec.x[27]) )}
        fileob.close()
    }
    if(DingNetworkLooping){
        fileob.aopen("SingleSACExperimentSpeedsAndContrasts.txt")
        if(DingNetwork==0){
            fileob.printf("%g %g %g  \n", bipspeed, contrast, (caivec.x[3]-caivec.x[27])/(caivec.x[3]+caivec.x[27]) )
        }else{
            fileob.printf("%g %g   %g\n", bipspeed, contrast, (caivec.x[3]-caivec.x[27])/(caivec.x[3]+caivec.x[27]) )
        }
        fileob.close()

    }
    
    
}

