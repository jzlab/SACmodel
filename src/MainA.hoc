//If you want to change an expvariable, then it will change it for the experiment
//If you want to change a variable that is set by an expvariable, then all the experiments will be untouched and you will just change the baseline
//If you change a variable that the experiments don't set, you change it for everything so be careful

expnumSACs=1              
expbipG1=1
expbipG2=.2
exptstop=1000
expcontrast=.3
nodends=0
network1=0 //probably not
network2=1
expangle=0
expbipspeed=2
expdendgpas=.0008//.001//


GanglionExperiment=0
SingleSACExperiment=1
SingleSACExperiment1=0
SingleSACDingExperiment=0
TwoSACLeeExperiment=0
TwoSACLeeExperimentSimple=0
clchannelcheck=0
SingleSACVGCCExperiment=0
ThreeSACVGCCcheck=0
SimpleClamp=0




    if (GanglionExperiment){ 
        expangle=0
        expcontrast=.6
        
    }
    if (SingleSACExperiment){
        expnumSACs=1
        exptstop=800
        expcontrast=.6
        
    }
    if(TwoSACLeeExperiment){
        expnumSACs=2
        expcontrast=0
        exptstop=1500
        expdendgpas=.0002//
        

    }

    if (SingleSACDingExperiment){
        expnumSACs=1
        exptstop=800
        expcontrast=.5
    }
    if(ThreeSACVGCCcheck){
        expnumSACs=3
        expcontrast=.2
    }
    
    if(clchannelcheck){
        expnumSACs=2
        exptstop=1500
    }
    if (SingleSACVGCCExperiment){
        exptstop=300
        expbipG1=0
        expbipG2=0
        expnumSACs=1

    }
    if(SimpleClamp){
        exptstop=300
        expbipG1=0
        expbipG2=0
        expnumSACs=1
        clampingdend=69
        clampingdend1=clampingdend
    }

    if(network1){    
        ssdist=60
        griddim=300/ssdist +5
        //expnumSACs=1
        expnumSACs=griddim*griddim
    }
    if(network2){
        ssdist=75
        placementfreedom=1
        griddim=2 //12
        expnumSACs=griddim*griddim
    }
    //-----------------------------------BEGIN PARAMETERS
    tstop=exptstop
    //SAC cell morphology
    numGen=4
    numFirst=6
    numDend=0
    numInner=0
    somaL=10
    dendD0=.5
    dendL=140
    dendD1=0.2
    dendgpas=expdendgpas
    dendepas=-60//-70//
    dendRa=100

    for igen=0,numGen-1{
    numDend+=numFirst*2^(igen)
    }
    numOutside=numFirst*2^(numGen-1)
    numInside=numDend-numOutside

    //bip placement
    amountoflowcontrast=1
    bipDensity=15
    bipMaxDist=100
    if (expbipG1==0||expcontrast==0||expbipG2==0){
        bipG1=0
        bipG2=0
    }else{
        bipG1=expbipG1*expcontrast    //expcontrast
        bipG2=expbipG2*expcontrast
    }
    bipspeed=expbipspeed
    
    //SAC building
    objectvar thetas
    numSACs=expnumSACs
    thetas = new Vector(numSACs)
    for i=0,numSACs-1{
        thetas.x[i]=expangle
    }
    SACmaxDist=30
    clchannelthres=0//.008
    clchannelscaling=8.75//.00000016//8//.000004//70 //max capre^4 makes probrelease =1 (err on the side of 1.1)
    clchannelamp=.3//.09
    clchannelgbar=100
    cachannelshift=10//22
    cachannelg=.002//.005
    //K Channel
    kv_gmax=0//50
    kv_n_50=-20
    kv_n_slope=-.04
    n_base_kv=.1
    kv_h_50=-60
    kv_h_slope=.15
    h_base_kv=.05
    kv_ntau_50=-30
    kv_ntau_slope=0
    kv_ntau_max=1
    kv_htau_50=0
    kv_htau_slope=0
    kv_htau_max=10
    kv_nN=1
    kv_spread_min=0
    kv_spread_mas=200
    e_kv=-70
    VGKCMaxDistance=200
    

    objectvar Xorg, Yorg
    objectvar ranCord, freedom
    makepos=(griddim*ssdist/2) +50

    if(network1){
        /*
        Xorg= new Vector(numSACs,0)
        Yorg= new Vector(numSACs,0)
        Xorg.x[0]=60
        Yorg.x[0]=60
        */
        /*
        Xorg= new Vector(numSACs,0)
        Yorg= new Vector()

        for irow=0,griddim-1 {
            for i=0,griddim-1{
                Yorg.append(irow*ssdist)
            }
        }
        for icol=0,griddim-1{
            for i=0,griddim-1{
            Xorg.x[icol+griddim*i]=(icol*ssdist)
            }
        }
        likelySAC=.1
        */
        
        ranCord=new Random()
        ranCord.uniform(0,(griddim-1)*ssdist)

        Xorg=new Vector(numSACs)
        Yorg=new Vector(numSACs)
        for i=0, numSACs-1{
            Xorg.x[i]=ranCord.repick()
            Yorg.x[i]=ranCord.repick()
        }
    }else if(network2){
        freedom= new Random()
        freedom.uniform((-ssdist/2)*placementfreedom,(ssdist/2)*placementfreedom)
        Xorg=new Vector(numSACs)
        Yorg=new Vector(numSACs)
        for icolumn=-griddim/2, icolumn=(griddim/2)-1{
            counter=icolumn+ (griddim/2)
            for ix=0, ix=griddim-1{
                Xorg.x[ix+counter*griddim]=ssdist*(icolumn)+ (ssdist/2) +freedom.repick() +makepos//left edge of the box plus half way
            }
        } 
        for irow=-griddim/2, irow=(griddim/2)-1{
            counter=irow+ (griddim/2)
            for iy=0, iy=griddim-1{
                Yorg.x[(griddim*iy)+counter]=ssdist*(irow)+ (ssdist/2)+ freedom.repick() +makepos//bottom edge of the box plus half way
            }
        }       
    }else if(TwoSACLeeExperiment||clchannelcheck||ThreeSACVGCCcheck){ 
        Xorg= new Vector(numSACs,0)
        Yorg= new Vector(numSACs,0)
        Xorg.x[1]=120
        if(ThreeSACVGCCcheck){
            Xorg.x[2]=-120
        }
    }else  {
        Xorg= new Vector(numSACs,0)
        Yorg= new Vector(numSACs,0)
    }

    //Gang building
    gangL=150
    numgangDend=12
    SACgangDist=15

    CalciumConductance=.05
    //-------------------------------END PARAMETERS
    //---------------------------
    numSimp=2
    top=10
    numclamps=2
    chosenSAC=0
    objectvar testg, testg2, g6, g5, g7, g8, g9, g4, g10, testg4, testg3, SAC[numSACs], fileob, g, voltagevec, timevec, maxdifvec, clamps[numclamps], clampcurrent, without[top], with[top], FauxRing[2], simplething, emptyvec, vspot[top]
    objectvar voltagejumps, randSAC, Gang, temp, currentmaxs, differencemin, List1, List2, temp2, difference[top], Simple[numSimp], vec1, vec2, randSACs, randCon
    objectvar caivec, caiwithout[top], caiwith[top], caidifference[top], icawithout[top], icawith[top], icadifference[top], vspot[top], excitevec, IBIPrecList, inhibitvec, ISACrecList
    testg=new Vector()
    testg2=new Vector()
    testg3=new Vector()
    testg4=new Vector()
    g4=new Graph()
    g6=new Graph()
    g5=new Graph()
    g7=new Graph()
    g8=new Graph()
    g9=new Graph()
    fileob= new File()
    g=new Graph()
    g10= new Graph()
    voltagevec=new Vector()
    caivec=new Vector()
    timevec= new Vector()
    maxdifvec=new Vector()
    clampcurrent=new Vector()
    currentmaxs=new Vector()
    voltagejumps=new Vector()
    randSAC=new Random()
    randSAC.uniform(0,1)
    randSACs=new Random(10)
    randSACs.uniform(0,numSACs-1)
    randCon=new Random()
    differencemin=new Vector()
    for i=0, top-1{
        without[i]=new Vector()
        with[i]=new Vector()
        difference=new Vector()
        caiwithout[i]=new Vector()
        caiwith[i]=new Vector()
        caidifference[i]=new Vector()
        icawithout[i]=new Vector()
        icawith[i]=new Vector()
        icadifference[i]=new Vector()
        vspot[i]=new Vector()
    }
    List1=new List()
    List2=new List()
    vec1=new Vector()
    vec2=new Vector()
    excitevec= new Vector()
    inhibitvec= new Vector()
    IBIPrecList =new List()
    ISACrecList= new List()
    emptyvec =new Vector(tstop, 0)

    FileNumber=1
    load_file("nrngui.hoc")
    load_file("BuildSAC.hoc")
    load_file("Delay_ConnectSAC.hoc")
    load_file("testingSAC.hoc")
    //gui
    if(1==1){
		xpanel("Params")
			xvalue("Contrast", "expcontrast" , 1, "update()")
            xvalue("bipG1")
            xvalue("bipG2")
			xvalue("E pas", "dendepas" , 1, "update()")
			xvalue("G pas", "dendgpas" , 1, "update()")
            xvalue("cachannelshift", "cachannelshift", 1, "update()")
            xvalue("cachannelg","cachannelg", 1, "update()")
            xvalue("kv_gmax", "kv_gmax", 1, "update()")
            xbutton("CurrentvsContrast", "CurrentvsContrast()")
            /*
            if(SimpleClamp){
                xvalue("clampingdend", "clampingdend", 1, "")
            }
            */
        xpanel(400,400)
    }
    
    //------------------------------------------EXPERIMENTS

if(GanglionExperiment){
    //-----------------------------------------------BUILDING PHASE
    print "GanglionExperiment"
    running=1
    //experiments to choose from
    ds=1
    vclamping=0
    printaboutconnections=0
    
    if(network1){
        gango=((griddim)*ssdist/2)}
    if(network2){
        gango=0+makepos
    }
    //-------------------BUILD
    {}
        Gang=new ganglion(gango,gango)
        build()
        if(nodends){break}
        delay()
        connecting()
        if(ds){
            gangdelay()
        }
        if(vclamping){
            access Gang.soma  
            clamps[0]=new VClamp(.5)
            clamps[0].dur[0]=tstop
            clamps[0].amp[0]=0
            /* to turn off bip synapses
            for ibipSyn=0, Gang.bipSynapses.count()-1{
                Gang.bipSynapses.object(ibipSyn).g1max=0
                Gang.bipSynapses.object(ibipSyn).g2max=0
            }
            */
        }

        //Connect gang and SACs //put this in a procedure?
            
        for i2=0, numSACs-1{           //over all varicosities
            for ivari=0, SAC[i2].VrecList.count()-1{
                x=SAC[i2].VrecXpos.get(ivari)
                y=SAC[i2].VrecYpos.get(ivari)
                relx=x-gango
                rely=y-gango
                if(sqrt(relx*relx+rely*rely)< gangL+SACgangDist){
                    for idend=0, numgangDend-1 {               //over all dendrites
                        access Gang.dend[idend]
                        ang=idend*(2*PI)/numgangDend
                        sameside=1
                        if (abs(sin(ang))<.05){
                            thres=SACgangDist
                            prime=rely
                            slidethres=-SACgangDist
                            inquestion=relx
                            if(abs(ang-PI)<.05){
                                inquestion=-inquestion
                            }
                        }else{
                            if(abs(cos(ang))<.1){
                                prime=relx
                                thres=(SACgangDist/sin (ang))
                            }else{
                                if(abs(sin(ang))<.7){
                                    thres=SACgangDist/cos(ang)
                                    prime=abs((relx/cos(ang)))-abs(rely)
                                    if (relx!=0){
                                        if((cos(ang)/relx)<0){sameside=0}
                                    }
                                }else{
                                    thres=(SACgangDist/sin (ang))
                                    prime=(relx-(rely/(sin(ang)/cos(ang))))
                                }
                            }
                            slidethres=(-SACgangDist)/sin(ang)
                            inquestion=rely
                            if(sin(ang)<0){
                            inquestion=-inquestion
                            slidethres=-slidethres
                            }
                        }
                        if(abs(prime)<=abs(thres)&&inquestion>=slidethres&&sameside){
                            place=sqrt(relx*relx+rely*rely)/gangL
                            if (place>1){place=1}
                            access Gang.dend[idend]
                            xplace=gango+(x3d(1)-x3d(0))*place
                            yplace=gango+ (y3d(1)-y3d(0))*place
                            yy=yplace-Yorg.x[i2]
                            xx=xplace-Xorg.x[i2]

                            indep=(atan2(yy,xx))
                            dep= (1/sqrt(2*PI*3))*exp(-(indep*indep*indep*indep*indep*indep*indep*indep)/(2*3))
                            likelySAC=.06+(dep*4.1)

                            if(abs(atan2(yy,xx))>(3*PI/4)){  //pd    //this doesn't decide where they go; it just shows a little bit of how they are distributed
                                either=2
                            }else   if(abs(atan2(yy,xx))<(PI/4)){ //nd
                                either=0
                            }else{
                                either=1
                            }
                            if(randSAC.repick()<likelySAC ){

                                temp=new ComplexCl2g(place)
                                setpointer temp.capre, SAC[i2].dend[42+ivari].cai(.8)
                                Gang.receivesCl[idend].append (temp)
                                SAC[i2].gangConnects.x[either]=SAC[i2].gangConnects.x[either]+1
                                temp= new Vector(3)
                                temp.x[0]=i2  //what SAC is it from
                                temp.x[1]=idend //what ganglion dendrite does it go to
                                temp.x[2]=indep //????
                                Gang.fromList.append(temp)
                                
                            }
                        }   
                    }
                }
            }
        }
    //everything has been delayed and connected appropriately
    //---------------------------------------------------EXPERIMENTAL SETUP PHASE
    if(printaboutconnections){
        sacconnects=0
        for iS= 0, numSACs-1{
            sacconnects=sacconnects+SAC[iS].receivesCl.count()
            averagenuminputs=sacconnects/(numSACs)
        }
        print "average number of inputs a SAC receives ", averagenuminputs

        fileob.wopen("GangExperimentConnectionTest.txt")
        for i=0, Gang.fromList.count()-1{
            i2=Gang.fromList.object(i).x[0] //which SAC
            fileob.printf("%g %g %g \n", Xorg.x[i2], Yorg.x[i2], Gang.fromList.object(i).x[2]) //xpos of origin, ypos of origin, ???
        }
        fileob.close()

        pdtotal=0
        ndtotal=0
        btwtotal=0
        sactotal=0
        for i2=0, numSACs-1{
            ndtotal=ndtotal+SAC[i2].gangConnects.x[0]
            pdtotal=pdtotal+SAC[i2].gangConnects.x[2]
            btwtotal=btwtotal+SAC[i2].gangConnects.x[1]
            if(SAC[i2].gangConnects.x[0]>0||SAC[i2].gangConnects.x[1]>0){
                sactotal+=1
            }
        }
        print"totals ", sactotal, ndtotal, btwtotal,pdtotal  //not very informative
    }
    if(vclamping){
        clampcurrent.record(&clamps[0].i,1) //record from ganglion soma
    }
    if (ds){
        voltagevec.record(&Gang.soma.v(.5),1)
    }

    //----------------------------------------------RUNNING EXPERIMENT PHASE
    if(running){
        if(vclamping){
            run()
            fileob.wopen("GangExperimentIPSC.txt")
            for i=0, clampcurrent.size()-1{
                fileob.printf("%g \n",clampcurrent.x[i])
            }
            fileob.close()
        }
        if(ds){
            run()
            fileob.wopen("GangExperimentI.txt")
            for i=0, voltagevec.size()-1{
                fileob.printf("%g \n",voltagevec.x[i])
            }
            fileob.close()
        }
    }
}
if(clchannelcheck){
    build()
    delay()
    connecting()

    a=0                         //cd synapse onto ab
    b=0
    c=SAC[a].fromList.object[b].x[0]
    d=SAC[a].fromList.object[b].x[1]
    testg.record(&SAC[a].receivesCl.object(b).capre,1)
    run()
    graphG5()
    graphG6()
}
if(ThreeSACVGCCcheck){
    build()
    delay()
    savevariangle()
    connecting()  //Only one connects to the others

    chosenSAC=0
    graphAngleCA()
    for w=0, SAC[chosenSAC].variAngle.size()-1{
        num= SAC[chosenSAC].CAIrecList.object(w).max()
        voltagevec.append(num)
    }

    fileob.wopen("SingleSACExperimentVvsAngle.txt")
    fileob.printf("Maximum_Calcium_Concentration_Across_Angles \n")
    fileob.printf("Angle Max_CAi \n")
    for i=0,SAC[chosenSAC].variAngle.size()-1{
        fileob.printf("%g %g \n",SAC[chosenSAC].variAngle.x[i],voltagevec.x[i] )
    }
    fileob.printf("%g %g \n",SAC[chosenSAC].variAngle.x[0],voltagevec.x[0] )
    fileob.printf("%g %g \n",SAC[chosenSAC].variAngle.x[1],voltagevec.x[1] )
    fileob.close()
}
if(TwoSACLeeExperiment){
    print "TwoSACLeeExperiment"
    takingtrace=0
    vto=-25

    build()
    setg()
    connecting()
    if(1==1){
        //clamp setup 
        
        if(network2){
            print "network"
            numneighbors=0
            while (numneighbors<50){
                whichSAC=randSACs.repick()
                numneighbors=SAC[whichSAC].receivesCl.count()
                print "attempt"
            }
            randCon.uniform(0,SAC[whichSAC].fromList.count-1)
            iinput=randCon.repick()
            neighborSAC=SAC[whichSAC].fromList.object(iinput).x[0]
        
            connectcount=0
            for i=0, SAC[whichSAC].fromList.count-1{
                if(SAC[whichSAC].fromList.object(i).x[0]==neighborSAC){
                    connectcount=connectcount+1
                }
            }
            print "how many inputs this SAC receives from neighbor SAC ", connectcount
            firstSAC=whichSAC
            secondSAC=neighborSAC  //which SAC is the one we observe. neighbor SAC is the one with the voltage changes
        }else{      
            firstSAC=0
            secondSAC=1
        }
        
        clampsetup(firstSAC,secondSAC)

        testg4.record(&SAC[a].receivesCl.object(b).capre,1)
        clampcurrent.record(&clamps[0].i,1) //record from postsyn soma
        if(takingtrace){
            a=firstSAC                        //cd synapse onto ab
            if(network2){
                b=iinput
            }else{
                b=0
            }
            c=SAC[a].fromList.object[b].x[0]
            d=SAC[a].fromList.object[b].x[1]
            //testg.record(&SAC[c].soma.i(.5),1)
            //testg.record(&SAC[a].dend[42+b].v(.5),1)
            print "abcd", a, b, c, d

            testg.record(&SAC[a].receivesCl.object(b).probrelease, 1)
            testg2.record(&SAC[a].receivesCl.object(b).numreleased,1)
            testg3.record(&SAC[a].receivesCl.object(b).i,1)
            

        
            clamps[1].amp[1]=vto
            run()
            graphG6()
            graphG7()
            graphG8()
            graphG9()
            fileob.wopen("TwoSACExperimentLeeITrace.txt")
            for i=0, clampcurrent.size()-1{
                fileob.printf("%g \n",clampcurrent.x[i])
            }
            fileob.close()
            //graphG8()
            //graphG6()
            //graphG7()
            //graphG5()
            //graphG4()
            //graphG9()
        }else{
            for i2=0, 9{              
                clamps[1].amp[1]=-65+10*i2
                run()
                voltagejumps.append(clamps[1].amp[1])
                //currentmaxs.append(clampcurrent.max(50, tstop)-clampcurrent.x[del/2])
                currentmaxs.append(testg4.max(50, tstop))
            }
            fileob.wopen("TwoSACExperimentLeeImaxes.txt")
            for i=0, currentmaxs.size()-1{
                fileob.printf("%g %g \n", voltagejumps.x[i], currentmaxs.x[i])
            }
            fileob.close()
        }

    }  
    
}
if(TwoSACLeeExperimentSimple){
    Simple[0]=new simple()
    Simple[1]=new simple()
    access Simple[1].soma
    temp2=new ComplexCl2(.5) 
    temp2.thres=clchannelthres
    setpointer temp2.capre, Simple[0].soma.cai(.5)

    del=500
    dur=200
    access Simple[1].soma
    clamps[0]=new VClamp(.5)
    clamps[0].dur[0]=tstop
    clamps[0].amp[0]=0

    access Simple[0].soma
    clamps[1]=new VClamp(.5)
    clamps[1].dur[0]=del
    clamps[1].amp[0]=-70
    clamps[1].dur[1]=dur
    clamps[1].dur[2]=tstop-del-dur
    clamps[1].amp[2]=-70


    clampcurrent.record(&clamps[0].i,1) //record from postsyn soma
    
    for i2=0, 7{              
            clamps[1].amp[1]=-65+10*i2
            run()
            voltagejumps.append(clamps[1].amp[1])
            currentmaxs.append (clampcurrent.max(4, tstop)-clampcurrent.x[del/2])//(Simple[0].CAIrecList.object(0).max(4, tstop))
            
            }
            fileob.wopen("TwoSACExperimentLeeImaxes.txt")
            for i=0, currentmaxs.size()-1{
                fileob.printf("%g %g \n", voltagejumps.x[i], currentmaxs.x[i])
            }
            fileob.close()

            graphG5()
            graphG4()

}


if (SingleSACDingExperiment){
    takingtrace=0  //are we taking a trace
    whichvar=65-numInside    // if so, of which varicosity
    tracepd=0 //if so, in the preferred direction or no?

    build()
    savetrueangle()
    choiceSAC=0

    if (takingtrace) {        //how we loop
        startl=whichvar
        finishl=whichvar
    }else{
        startl=0
        finishl=(SAC[choiceSAC].trueAngle.size()-1)/numFirst
    }

    for k=startl, finishl{
        thetas.x[choiceSAC]= SAC[choiceSAC].trueAngle.get(k)
        print "theta is ", thetas.x[choiceSAC] 
        delay()
        run()
        pdCAi=SAC[choiceSAC].CAIrecList.object(k).max() //changed it
        print pdCAi
        if(tracepd){break} //what we are tracing

        if(SAC[choiceSAC].trueAngle.get(k)>0){
            thetas.x[choiceSAC]= SAC[choiceSAC].trueAngle.get(k)-PI
        }else{
            thetas.x[choiceSAC]= SAC[choiceSAC].trueAngle.get(k)+PI
        }
        print "theta is ", thetas.x[choiceSAC]
        delay()
        run()
        ndCAi=SAC[choiceSAC].CAIrecList.object(k).max()  //changed it 
        print ndCAi
        dsi=(pdCAi-ndCAi)/pdCAi
        print"dsi", dsi
        if(takingtrace==0){maxdifvec.append(dsi)}
    }
    if(takingtrace){  //what we graph
        fileob.wopen("SingleSACDingExperimentCaTrace.txt")
        for i=0, SAC[choiceSAC].CAIrecList.object(k).size()-1{
            fileob.printf("  %g \n", SAC[choiceSAC].CAIrecList.object(k).x[i] ) //changed it
        }
        fileob.close()
    }else{
        fileob.wopen("SingleSACDingExperimentDSI.txt")
        for i=0, maxdifvec.size()-1{
            fileob.printf(" %g \n", maxdifvec.x[i])
        }
        fileob.close()
        print "mean", (maxdifvec.mean()), "std", (maxdifvec.stdev())

    }
}

if(SingleSACExperiment){
    expand=0
    build()
    setg()
    print " we have built"
    delay()
    savevariangle()
    if(1==1){
    if (network1||network2){
        connecting()
        print " we have connected"
        chosenSAC= 2  //or 56?
    }else{
        chosenSAC=0
    }
    
    //fauxconnect()

    //testg3=SAC[chosenSAC]. MrecList().object(27)
    //testg=SAC[chosenSAC].MrecList().object(3)

     //graphG7()

    //xopen("BuildGUI1.ses")
    if(1==1){
    //testg.record(&SAC[0].bipSynapses.object(83).i,1)  
    //timevec.record(&t)
    numb= SAC[chosenSAC].bipSynapses.count() //recording excitatory currents
    for i=0, numb-1{
        temp=new Vector()
        temp.record(&SAC[chosenSAC].bipSynapses.object(i).g,1) //current or conductance?
        IBIPrecList.append(temp)
    }
    if(network1||network2){
        numc=SAC[chosenSAC].receivesCl.count() //how many inputs are we getting from other SACs
        for i=0, numc-1{
            temp=new Vector()
            temp.record(&SAC[chosenSAC].receivesCl.object(i).g,1) //current or conductance?
            ISACrecList.append(temp)
        }
    }
    print "prepared correctly"
    run()
    print "we ran"
    for i=1,numb-1{
        excitevec=IBIPrecList.object(0).add(IBIPrecList.object(i))
    }
    print "excitatory recorded"
    testg=IBIPrecList.object(0)
    
    if(network1||network2){
        for i=1,numc-1{
            inhibitvec=ISACrecList.object(0).add(ISACrecList.object(i))
        }
        testg2=ISACrecList.object(0)
    }
    
    
    print "added correctly"
    //testg=SAC[chosenSAC].fauxvaricurrent.object(30)
    //current trace graph
   //graphG8()
   //graphG7()
    /*
    fileob.wopen("SingleSACExperimentITrace.txt") 
    for i=0, testg.size()-1{
        fileob.printf("%g \n", testg.x[i])
    }
    fileob.close()
    */

    //maxcalcium vs angle
    
    //graphAngleCA()
    //graphAngleV()
    for w=0, SAC[chosenSAC].variAngle.size()-1{
        if(expand){
            num=SAC[chosenSAC].fauxvaricurrent.object(w).max()
        }else{
            num= SAC[chosenSAC].CAIrecList.object(w).max()
            num2=SAC[chosenSAC].VrecList.object(w).max()
        }
        caivec.append(num)
        voltagevec.append(num2)
    }
 
    Dend1=27 //LEFT
    Dend2=3 //RIGHT

    testg3= SAC[chosenSAC].VrecList.object(Dend1)
    testg4=SAC[chosenSAC].VrecList.object(Dend2)
    graphG8()
    graphG9()

    fileob.wopen("SingleSACExperimentVvsAngle.txt")
    fileob.printf("Maximum_Calcium_Concentration_Across_Angles \n")
    fileob.printf("Angle Max_V Max_CAi \n")
    for i=0,SAC[chosenSAC].variAngle.size()-1{
        fileob.printf("%g %g %g\n",SAC[chosenSAC].variAngle.x[i],voltagevec.x[i], caivec.x[i] )
    }
    fileob.printf("%g %g %g\n",SAC[chosenSAC].variAngle.x[0],voltagevec.x[0], caivec.x[0] )
    fileob.printf("%g %g %g\n",SAC[chosenSAC].variAngle.x[1],voltagevec.x[1], caivec.x[1] )
    fileob.close()
 
    if (network1||network2){
        fileob.wopen("SingleSACExperimentExciteInhibit.txt")
        fileob.printf("Single_SAC_Experiment_Excite_Inhibit \n")
        fileob.printf("t excite inhibit \n")
        for i=0,tstop-1{
            fileob.printf("%g %g %g\n",i ,excitevec.x[i], inhibitvec.x[i] )
        }
        fileob.close()
    }
    
    fileob.wopen("SingleSACExperimentVTrace.txt")  //voltage, ca concentration, current ca, numreleased, postcurrent
    //voltage ca concentration, ca current, potassium current
    fileob.printf("V_left CAI_left ICA_left IK_left V_right CAI_right ICA_right IK_right\n")
    for i=0, SAC[chosenSAC].VrecList.object(Dend1).size()-1{
        if(expand){
            fileob.printf("%g %g %g %g %g ", SAC[chosenSAC].VrecList.object(Dend1).x[i], SAC[chosenSAC].CAIrecList.object(Dend1).x[i], SAC[chosenSAC].ICArecList.object(Dend1).x[i] , SAC[chosenSAC].fauxvarirelease.object(Dend1).x[i], SAC[chosenSAC].fauxvaricurrent.object(Dend1).x[i])

            fileob.printf("%g %g %g %g %g\n", SAC[chosenSAC].VrecList.object(Dend2).x[i], SAC[chosenSAC].CAIrecList.object(Dend2).x[i], SAC[chosenSAC].ICArecList.object(Dend2).x[i] , SAC[chosenSAC].fauxvarirelease.object(Dend2).x[i], SAC[chosenSAC].fauxvaricurrent.object(Dend2).x[i])
        }else{
            fileob.printf("%g %g %g %g ", SAC[chosenSAC].VrecList.object(Dend1).x[i], SAC[chosenSAC].CAIrecList.object(Dend1).x[i], SAC[chosenSAC].ICArecList.object(Dend1).x[i], SAC[chosenSAC].IKrecList.object(Dend1).x[i] )
            fileob.printf("%g %g %g %g\n", SAC[chosenSAC].VrecList.object(Dend2).x[i], SAC[chosenSAC].CAIrecList.object(Dend2).x[i], SAC[chosenSAC].ICArecList.object(Dend2).x[i], SAC[chosenSAC].IKrecList.object(Dend2).x[i] )
        }
    }
    fileob.close()
   

    //Voltage Trace s
    /*
    Dend1=42-numInside
    Dend2=51-numInside
    Dend3=57-numInside
    Dend4=63-numInside
    Dend5=70-numInside
    Dend6=76-numInside
    Dend7=80-numInside
    Dend8=88-numInside

    fileob.wopen("SingleSACExperimentVTrace.txt")
    fileob.printf("Calcium_Recordings_from_the_Varicosities_of_a_SAC_at_these_Dendrites %d %d %d %d %d %d %d %d \n", Dend1, Dend2, Dend3, Dend4, Dend5, Dend6, Dend7, Dend8)
    fileob.printf("Angle_of_the_dendrites %g %g %g %g %g %g %g %g \n", SAC[chosenSAC].variAngle.x[Dend1], SAC[chosenSAC].variAngle.x[Dend2], SAC[chosenSAC].variAngle.x[Dend3], SAC[chosenSAC].variAngle.x[Dend4], SAC[chosenSAC].variAngle.x[Dend5], SAC[chosenSAC].variAngle.x[Dend6], SAC[chosenSAC].variAngle.x[Dend7], SAC[chosenSAC].variAngle.x[Dend8] )
    for i=0, SAC[chosenSAC].CAIrecList.object(Dend1).size()-1{
        fileob.printf(" %g %g %g %g %g %g %g %g \n", SAC[chosenSAC].VrecList.object(Dend1).x[i], SAC[chosenSAC].VrecList.object(Dend2).x[i], SAC[chosenSAC].VrecList.object(Dend3).x[i], SAC[chosenSAC].VrecList.object(Dend4).x[i], SAC[chosenSAC].VrecList.object(Dend5).x[i], SAC[chosenSAC].VrecList.object(Dend6).x[i], SAC[chosenSAC].VrecList.object(Dend7).x[i], SAC[chosenSAC].VrecList.object(Dend8).x[i] )
    }
    fileob.close()
    */

   //timevec.x[i]
    }
    }
}

if (SingleSACVGCCExperiment){
    print"SingleSACVGCCExperiment"
    simply=0
    chosendend=0
    ivsv=1
    bottom=-65
    inc=10
    vinquestion=-55  //If you are writting to Itrace this needs to have been included
    vnum=(vinquestion-bottom)/inc
    tdel=100
    
    if(simply){
        simplething=new simple()
        access simplething.soma
    }else{
        build()
        setg()
        access SAC[0].soma //SAC[0].dend[42]//
    }
    clamps[0]=new VClamp(.5)
        clamps[0].dur[0]=tdel
        clamps[0].dur[1]=100
        clamps[0].dur[2]=tstop-tdel-100
        clamps[0].amp[2]=bottom
        clamps[0].amp[0]=bottom

    temp=new Vector()
    if(ivsv){                           //--------------ivsv
        if(simply){
            gbar_calrgc=0
        }else{
            
            for idend=0, SAC[i2].VrecList.count()-1{
                access SAC[0].dend[42+idend]
                gbar_calrgc=0
            }
            /*
            for idend=0, 17{  //REMEBER TO FIX THIS
                access SAC[0].dend[idend]
                gkbar_kv=0
            }
            */
        }
        for i=1, top{
            clamps[0].amp[1]=bottom+inc*i
            temp2=new Vector()
            temp2.record(&clamps[0].i,1)  //record soma current
            run()
            without[i-1].copy(temp2)
            if(simply){
                caiwithout[i-1].copy(simplething.CAIrecList.o(0)) //additionally cai in the soma
                icawithout[i-1].copy(temp2)
                vspot[i-1].copy(SAC[0].VrecList.o(0))  
            }else{
                icawithout[i-1].copy(SAC[0].ICArecList.o(chosendend)) //or cai in the dend and ica in the dend
                caiwithout[i-1].copy(SAC[0].CAIrecList.o(chosendend))
                vspot[i-1].copy(SAC[0].VrecList.o(chosendend))
            }
        }
        if(simply){
            gbar_calrgc=cachannelg
        }else{
            
            for idend=0, SAC[i2].VrecList.count()-1{
            access SAC[0].dend[42+idend]
            gbar_calrgc=cachannelg
            }
            /*
            for idend=0, 17{
                access SAC[0].dend[idend]
                gkbar_kv=kchannelg
            }
            */
        }
        temp=new Vector()
        for i=1, top{
            clamps[0].amp[1]=bottom+inc*i
            temp2=new Vector()
            temp2.record(&clamps[0].i,1)
            run()
            with[i-1].copy(temp2)
            if(simply){
                caiwith[i-1].copy(simplething.CAIrecList.o(0))
                icawith[i-1].copy(temp2)    //were just cheating by saving the same thing twice because I didn't want to redo the text files
            }else{
                icawith[i-1].copy(SAC[0].ICArecList.o(chosendend)) 
                caiwith[i-1].copy(SAC[0].CAIrecList.o(chosendend))
            }
        }

        for i=0, top-1{
            difference[i]=with[i].c.sub(without[i])
            if (simply){
                caidifference[i]=caiwith[i].c.sub(caiwithout[i])
                icadifference[i]=icawith[i].c.sub(icawithout[i])
            }else{
                caidifference[i]=caiwith[i].c.sub(caiwithout[i])
                icadifference[i]=icawith[i].c.sub(icawithout[i])
            }
        }
        
        fileob.wopen("SingleSACVGCCExperimentIvsV.txt")
        fileob.printf("voltage somaICAstabilized CAImax dendV dendICA \n")
        for i=0, top-1{
            if(simply){
                fileob.printf("%g %g %g %g %g \n", bottom+(i+1)*inc, difference[i].x[tstop/2], caidifference[i].x[tstop/2], vspot[i].x[tstop/2], icadifference[i].x[tstop/2])
            }else{
                fileob.printf("%g %g %g %g %g \n", bottom+(i+1)*inc, difference[i].x[tstop/2], caidifference[i].x[tstop/2], vspot[i].x[tstop/2], icadifference[i].x[tstop/2] )
            }
        }
        fileob.close()  
        
        
        fileob.wopen("SingleSACVGCCExperimentICAalltraces.txt")
        fileob.printf("ICAalltraces \n")
        for i=0, top-1{
            fileob.printf("somaICA%g ", bottom+(i+1)*inc)
        }
        for i=0, top-1{
            fileob.printf("CAI%g ", bottom+(i+1)*inc)
        }
        for i=0, top-1{
            fileob.printf("dendV%g ", bottom+(i+1)*inc)
        }
        for i=0, top-1{
            fileob.printf("ICAdend%g ", bottom+(i+1)*inc)
        }
        fileob.printf("\n")
        for i=0, difference[0].size()-1{
            for whichv=0, top-1{
                fileob.printf("%g ",difference[whichv].x[i])
            }
            for whichv=0, top-1{
                if(whichv==top-1){
                    fileob.printf("%g ",caidifference[whichv].x[i])
                }else{
                    fileob.printf("%g ",caidifference[whichv].x[i])
                }
            }
            for whichv=0, top-1{
                fileob.printf("%g ",vspot[whichv].x[i])
            }
            for whichv=0, top-1{
                if(whichv==top-1){
                    fileob.printf("%g \n",icadifference[whichv].x[i])
                }else{
                    fileob.printf("%g ",icadifference[whichv].x[i])
                }
            }
        }
        fileob.close()  
        
        
        fileob.wopen("SingleSACVGCCExperimentITrace.txt")
        fileob.printf("somaICAwith somaICAwithout somaICAdifference CAIwith CAIwithout CAIdifference dendICAwith dendICAwithout dendICAdifference\n")
        for i=0, tstop-1{
            fileob.printf("%g %g %g %g %g %g %g %g %g \n", with[vnum-1].x[i], without[vnum-1].x[i], difference[vnum-1].x[i], caiwith[vnum-1].x[i], caiwithout[vnum-1].x[i], caidifference[vnum-1].x[i], icawith[vnum-1].x[i], icawithout[vnum-1].x[i], icadifference[vnum-1].x[i])
        }
        fileob.close()
        
    }else{                                 //----------otherwise
        for idend=0, SAC[i2].VrecList.count()-1{
            access SAC[0].dend[42+idend]
            gbar_calrgc=cachannelg
        }
        temp=new Vector()

        for i=0, top{
            clamps[0].amp[1]=bottom+inc*i
            access SAC[0].dend[42]
            testg.record(&m_calrgc(.8),1)
            testg2.record(&ica_calrgc(.8),1)
            run()
            vec1.append(testg.x[150])
            vec2.append(testg2.x[150])
        }
    
    
        fileob.wopen("SingleSACVGCCExperimentTestvsV.txt")
        for i=0, top-1{
            fileob.printf("%g %g %g \n", bottom+(i+1)*inc, vec1.x[i], vec2.x[i] )
        }
        fileob.close() 
        
        graphG6()
        graphG7()
    }
}

if(SimpleClamp){
    chosenSAC=0
    print"SimpleClamp"
    bottom=-60
    destination=-50
    tdel=100
    tdur=100
    build()

}

